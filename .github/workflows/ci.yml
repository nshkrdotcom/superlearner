name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        elixir: [1.18.3]
        otp: [27.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ matrix.elixir }}
        otp-version: ${{ matrix.otp }}
    
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: ${{ runner.os }}-mix-
    
    - name: Install dependencies
      run: mix deps.get
    
    - name: Debug environment
      run: |
        echo "=== Current directory ==="
        pwd
        echo "=== Test directory structure ==="
        find test -name "*.exs" | head -20
        echo "=== Specific file check ==="
        ls -la test/otp_supervisor/core/message_tracer_test.exs || echo "File not found"
        file test/otp_supervisor/core/message_tracer_test.exs || echo "File command failed"
        echo "=== MIX_ENV ==="
        echo $MIX_ENV
        echo "=== Elixir version ==="
        elixir --version
    
    - name: Compile application
      run: mix compile --force --no-elixir-version-check
    
    - name: Check formatting
      run: mix format --check-formatted
    
    - name: Run tests with verbose output (with retry for compilation race conditions)
      run: |
        # Try running tests up to 3 times to handle compilation race conditions
        for i in {1..3}; do
          echo "Test attempt $i"
          if mix test --trace --max-cases 1 --no-elixir-version-check --force; then
            echo "Tests passed on attempt $i"
            break
          else
            exit_code=$?
            if [ $i -eq 3 ]; then
              echo "Tests failed after 3 attempts"
              exit $exit_code
            fi
            echo "Test attempt $i failed, retrying..."
            sleep 5
          fi
        done
      env:
        MIX_ENV: test
    
    - name: Run dialyzer
      run: mix dialyzer